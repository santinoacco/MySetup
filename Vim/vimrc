" based on Fisa-vim-config
" http://fisadev.github.io/fisa-vim-config/
" version: 12


" To use fancy symbols wherever possible, change this setting from 0 to 1
" and use a font from https://github.com/ryanoasis/nerd-fonts in your terminal 
" (if you aren't using one of those fonts, you will see funny characters here. 
" Turst me, they look nice when using one of those fonts).
let fancy_symbols_enabled = 0


set encoding=utf-8
let using_neovim = has('nvim')
let using_vim = !using_neovim

" ============================================================================
" Vim-plug initialization
" Avoid modify this section, unless you are very sure of what you are doing

let vim_plug_just_installed = 0
if using_neovim
    let vim_plug_path = expand('~/.config/nvim/autoload/plug.vim')
else
    let vim_plug_path = expand('~/.vim/autoload/plug.vim')
endif
if !filereadable(vim_plug_path)
    echo "Installing Vim-plug..."
    echo ""
    if using_neovim
        silent !mkdir -p ~/.config/nvim/autoload
        silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    else
        silent !mkdir -p ~/.vim/autoload
        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    endif
    let vim_plug_just_installed = 1
endif

" manually load vim-plug the first time
if vim_plug_just_installed
    :execute 'source '.fnameescape(vim_plug_path)
endif

" Obscure hacks done, you can now modify the rest of the .vimrc as you wish :)
" IMPORTANT: some things in the config are vim or neovim specific. It's easy 
" to spot, they are inside `if using_vim` or `if using_neovim` blocks.
" ============================================================================


" this needs to be here,
"  so vim-plug knows we are declaring the plugins we want to use
call plug#begin('~/.vim/plugged')
if using_neovim
    call plug#begin("~/.config/nvim/plugged")
else
    call plug#begin("~/.vim/plugged")
endif


" You can disable or add new ones here:
" ----> Active plugins from github repos:

" -Personal wiki
    Plug 'vimwiki/vimwiki'                          

" -LaTex vimtex
    Plug 'lervag/vimtex'                            

" -Git integration
    Plug 'motemen/git-vim'                          

" -Git/mercurial/others diff icons on the side of the file lines
    Plug 'mhinz/vim-signify'

" -Better file browser
    Plug 'scrooloose/nerdtree'                      

" -Code commenter
    Plug 'scrooloose/nerdcommenter'                 

" -Airline
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

" -Terminal Vim with 256 colors colorscheme
    Plug 'fisadev/fisa-vim-colorscheme'

" -Pending tasks list
    Plug 'fisadev/FixedTaskList.vim'                    

" -Async autocompletion
    if using_neovim && vim_plug_just_installed
        Plug 'Shougo/deoplete.nvim', {'do': ':autocmd VimEnter * UpdateRemotePlugins'}
    else
        Plug 'Shougo/deoplete.nvim'
    endif

" -Automatically close parenthesis, etc
    Plug 'Townk/vim-autoclose'

" -Automatically sort python imports
    Plug 'fisadev/vim-isort'

" -Snippets manager (SnipMate), dependencies, and snippets repo
    Plug 'MarcWeber/vim-addon-mw-utils'
    Plug 'tomtom/tlib_vim'
    Plug 'honza/vim-snippets'
    Plug 'garbas/vim-snipmate'

" -Python and other languages code checker
    Plug 'scrooloose/syntastic'
    if has('python')
        " YAPF formatter for Python
        Plug 'pignacio/vim-yapf-format'
    endif


" ----> Inactive plugins
""" -Async autocompletion
""  TODO: test this
""    Plug 'roxma/nvim-yarp'
""    Plug 'roxma/vim-hug-neovim-rpc'

""  TODO: test this
""" -Python autocompletion
""    Plug 'deoplete-plugins/deoplete-jedi'

""  TODO: test this
""" -Completion from other opened files
""    Plug 'Shougo/context_filetype.vim'

""" -Just to add the python go-to-definition and similar features,
""" autocompletion from this plugin is disabled
""    Plug 'davidhalter/jedi-vim'

""  TODO: test this
""" -Code and files fuzzy finder
""    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
""    Plug 'junegunn/fzf.vim'

""  TODO: test this
""" -Search results counter
""    Plug 'vim-scripts/IndexedSearch'             

"""Plug 'arielrossanigo/dir-configs-override.vim'       " Override configs by directory 

"""Plug 'majutsushi/tagbar'                            " Class/module browser

"""Plug 'ctrlpvim/ctrlp.vim'                           " Code and files fuzzy finder

"""Plug 'fisadev/vim-ctrlp-cmdpalette'                 " Extension to ctrlp, for fuzzy command finder

"""Plug 'mattn/emmet-vim'                              " Zen coding

"""Plug 'kien/tabman.vim'                              " Tab list panel

""" -Surround
""    Plug 'tpope/vim-surround'

""" -Indent text object
""    Plug 'michaeljsmith/vim-indent-object'

""" -Indentation based movements
""    Plug 'jeetsukumaran/vim-indentwise'

""  TODO: test this
""" -Better language packs
""    Plug 'sheerun/vim-polyglot'

""" -Ack code search (requires ack installed in the system)
""    Plug 'mileszs/ack.vim'

""" -Paint css colors with the real color
""    Plug 'lilydjwg/colorizer'

""" -Window chooser
""    Plug 't9md/vim-choosewin'

""  TODO: test this
""" -Yank history navigation
""    Plug 'vim-scripts/YankRing.vim'

""  TODO: test this
""" -Linters
""    Plug 'neomake/neomake'




" Tell vim-plug we finished declaring plugins,
" so it can load them
call plug#end()

" ============================================================================
" Install plugins the first time vim runs

if vim_plug_just_installed
    echo "Installing Bundles, please ignore key map error messages"
    :PlugInstall
endif

" ============================================================================

" ----> Settings 

if using_vim
    " no vi-compatible
    set nocompatible
    " always show status bar
    set ls=2

    " allow plugins by file type (required for plugins!)
    filetype plugin indent on

    " incremental search
    set incsearch
    " highlighted search results
    set hlsearch
    " syntax highlight on
    syntax on
    

    " better backup, swap and undos storage
    set directory=~/.vim/dirs/tmp                 " directory to place swap files in
    set backup                                    " make backup files
    set backupdir=~/.vim/dirs/backups             " where to put backup files
    set undofile                                  " persistent undos - undo after you re-open the file
    set undodir=~/.vim/dirs/undos
    set viminfo+=n~/.vim/dirs/viminfo
    " store yankring history file there too
    let g:yankring_history_dir = '~/.vim/dirs/'

    " create needed directories if they don't exist
    if !isdirectory(&backupdir)
        call mkdir(&backupdir, "p")
    endif
    if !isdirectory(&directory)
        call mkdir(&directory, "p")
    endif
    if !isdirectory(&undodir)
        call mkdir(&undodir, "p")
    endif

end

" -Tabs and spaces handling
    set expandtab
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4

" -Windows split from below
    set splitbelow                      

" -Remove ugly vertical lines on window division
    set fillchars+=vert:\ 

" -Needed so deoplete can auto select the first suggestion
    set completeopt+=noinsert

" -Comment this line to enable autocompletion preview window
" (displays documentation related to the selected completion option)
" disabled by default because preview makes the window flicker
    set completeopt-=preview

" -When scrolling, keep cursor 3 lines away from screen border
    set scrolloff=3

" save as sudo
    ca w!! w !sudo tee "%"

" -Use 256 colors when possible
    if has('gui_running') || using_neovim || (&term =~? 'mlterm\|xterm\|xterm-256\|screen-256')
        if !has('gui_running')
            let &t_Co = 256
        endif
        "colorscheme vim-monokai-tasty
        colorscheme fisa 
    else
        colorscheme delek
    endif

" -Fold code with indentation
"   some usecases:
"       za: Toggle code folding at the current line.
"       zo: open fold.
"       zc: close fold.
"       zR: open all folds.
"       zM: close all folds.
    set foldmethod=indent
    "set nofoldenable        "so all files open unfolded"

" Search down into subfolders,
" supports tab-completion,
" just use :find
    set path+=**

" Display all matching files when we tab complete
    set wildmenu

" -Autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
    set wildmode=list:longest

" -Clear empty spaces at the end of lines on save of python files
    autocmd BufWritePre *.py :%s/\s\+$//e

""" -Fix problems with uncommon shells (fish, xonsh) and plugins running commands
""" (neomake, ...)
""    set shell=/bin/bash 

"TODO: test when fish is installed
""" Ability to add python breakpoints
""" (I use ipdb, but you can change it to whatever tool you use for debugging)
""    au FileType python map <silent> <leader>b Oimport ipdb; ipdb.set_trace()<esc>



" ============================================================================
" ----> Mappings

" -Hybrid line numbers on/off
    nmap<silent> ,nu :set nu rnu<CR>
    nmap<silent> ,nnu :set nonu nornu<CR>

""" simple recursive grep (requires Ack installed)
""    nmap ,r :Ack 
""    nmap ,wr :Ack <cword><CR>

" mapping for spelling mistake
    "  -- spanish
    nmap sples :set spell spelllang=es<CR>
    "  -- english
    nmap splen :set spell spelllang=en_us<CR>
    "  -- exit
    nmap qspl :set nospell<CR>

""" -Tab navigation mappings
""    map tn :tabn<CR>
""    map tp :tabp<CR>
""    map tm :tabm 
""    map tt :tabnew 
""    map ts :tab split<CR>
""    map <C-S-Right> :tabn<CR>
""    imap <C-S-Right> <ESC>:tabn<CR>
""    map <C-S-Left> :tabp<CR>
""    imap <C-S-Left> <ESC>:tabp<CR>

" navigate windows with meta+arrows
    map <M-Right> <c-w>l
    map <M-Left> <c-w>h
    map <M-Up> <c-w>k
    map <M-Down> <c-w>j
    imap <M-Right> <ESC><c-w>l
    imap <M-Left> <ESC><c-w>h
    imap <M-Up> <ESC><c-w>k
    imap <M-Down> <ESC><c-w>j


" ----> Plugins settings and mappings

" *Tagbar* ----------------------------- 
    " toggle tagbar display
    map <F4> :TagbarToggle<CR>

    " autofocus on tagbar open
    let g:tagbar_autofocus = 1

" NERDTree ----------------------------- 
    " toggle nerdtree display
    map <F3> :NERDTreeToggle<CR>

    " open nerdtree with the current file selected
    nmap ,t :NERDTreeFind<CR>

    " don;t show these file types
    let NERDTreeIgnore = ['\.pyc$', '\.pyo$']

    " Enable folder icons
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    let g:DevIconsEnableFoldersOpenClose = 1

    " Fix directory colors
    highlight! link NERDTreeFlags NERDTreeDir

    " Remove expandable arrow
    let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
    let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
    let NERDTreeDirArrowExpandable = "\u00a0"
    let NERDTreeDirArrowCollapsible = "\u00a0"
    let NERDTreeNodeDelimiter = "\x07"

    " Autorefresh on tree focus
    function! NERDTreeRefresh()
        if &filetype == "nerdtree"
            silent exe substitute(mapcheck("R"), "<CR>", "", "")
        endif
    endfunction

    autocmd BufEnter * call NERDTreeRefresh()

" Tasklist ------------------------------
    " show pending tasks list
    map <F2> :TaskList<CR>

" Deoplete -----------------------------
    " -Use deoplete.
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_ignore_case = 1
    let g:deoplete#enable_smart_case = 1
    
    " -Complete with words from any opened file
    let g:context_filetype#same_filetypes = {}
    let g:context_filetype#same_filetypes._ = '_'


" Syntastic ------------------------------
    " show list of errors and warnings on the current file
    nmap <leader>e :Errors<CR>

    " check also when just opened the file
    let g:syntastic_check_on_open = 1

    " don't put icons on the sign column (it hides the vcs status icons of signify)
    let g:syntastic_enable_signs = 0
    " -Custom icons (enable them if you use a patched font, and enable the previous 
    " setting)
    "let g:syntastic_error_symbol = '✗'
    "let g:syntastic_warning_symbol = '⚠'
    "let g:syntastic_style_error_symbol = '✗'
    "let g:syntastic_style_warning_symbol = '⚠'


" Autoclose ------------------------------
    " Fix to let ESC work as espected with Autoclose plugin
    " (without this, when showing an autocompletion window, ESC won't leave insert
    "  mode)
    let g:AutoClosePumvisible = {"ENTER": "\<C-Y>", "ESC": "\<ESC>"}

" Signify ------------------------------
    " This first setting decides in which order try to guess your current vcs
    " UPDATE it to reflect your preferences,
    " it will speed up opening files
    let g:signify_vcs_list = [ 'git', 'hg' ]
    
    " mappings to jump to changed blocks
    nmap <leader>sn <plug>(signify-next-hunk)
    nmap <leader>sp <plug>(signify-prev-hunk)
    
    " nicer colors
    highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
    highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
    highlight DiffChange        cterm=bold ctermbg=none ctermfg=227
    highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=119
    highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=167
    highlight SignifySignChange cterm=bold ctermbg=237  ctermfg=227

" Window Chooser ------------------------------
    " mapping
    nmap  -  <Plug>(choosewin)
    " show big letters
    let g:choosewin_overlay_enable = 1

" Airline ------------------------------
    let g:airline_powerline_fonts = 0
    let g:airline_theme = 'bubblegum'
    let g:airline#extensions#whitespace#enabled = 0

" Snippets engine
"ActivateAddons vim-snippets UltiSnips

" Custom configurations ----------------
    " Include user's custom nvim configurations
    if using_neovim
        let custom_configs_path = "~/.config/nvim/custom.vim"
    else
        let custom_configs_path = "~/.vim/custom.vim"
    endif
    if filereadable(expand(custom_configs_path))
      execute "source " . custom_configs_path
    endif

""  TODO: test this
""" Neomake ------------------------------
"    " Run linter on write
"    autocmd! BufWritePost * Neomake
"
"    " Check code as python3 by default
"    let g:neomake_python_python_maker = neomake#makers#ft#python#python()
"    let g:neomake_python_flake8_maker = neomake#makers#ft#python#flake8()
"    let g:neomake_python_python_maker.exe = 'python3 -m py_compile'
"    let g:neomake_python_flake8_maker.exe = 'python3 -m flake8'
"
"    " -Disable error messages inside the buffer,
"    "  next to the problematic line
"    let g:neomake_virtualtext_current_error = 0

""  TODO: test this
""" Yankring -------------------------------
""    if using_neovim
""        let g:yankring_history_dir = '~/.config/nvim/'
""        " Fix for yankring and neovim problem when system has non-text things
""        " copied in clipboard
""        let g:yankring_clipboard_monitor = 0
""    else
""        let g:yankring_history_dir = '~/.vim/dirs/'
""    endif


""  TODO: test this
""" Fancy Symbols!!
""    if fancy_symbols_enabled
""        let g:webdevicons_enable = 1
""
""        " custom airline symbols
""        if !exists('g:airline_symbols')
""           let g:airline_symbols = {}
""        endif
""        let g:airline_left_sep = ''
""        let g:airline_left_alt_sep = ''
""        let g:airline_right_sep = ''
""        let g:airline_right_alt_sep = ''
""        let g:airline_symbols.branch = '⭠'
""        let g:airline_symbols.readonly = '⭤'
""        let g:airline_symbols.linenr = '⭡'
""    else
""        let g:webdevicons_enable = 0
""    endif




